~~~
~~ #%L
~~ xcode-maven-plugin
~~ %%
~~ Copyright (C) 2013 SAP AG
~~ %%
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~ 
~~      http://www.apache.org/licenses/LICENSE-2.0
~~ 
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~ #L%
~~~
 
 ------
 Usage
 ------
 ------
 2013-06-27
 ------

How to build frameworks aggregating multiple other libraries or frameworks

* Purpose of this page
 
   This page explains how frameworks representing aggregations from multiple libraries or frameworks can be built with the xcode-maven-plugin.

* Motivation 

  If you are a library or a framework provider and you have separated your code into multiple project, it may happen that your consumers have to deal with separate multiple libraries or frameworks. To facilitate this consumption, you could provide an aggregated framework, combining the commonly used together separate libraries or frameworks.

      
* Step-by-step Guide

   * Create Xcode Framework Project. See {{{examples/FmwkBuildExample.html}Building a Static Xcode Framework}} for detailed information concerning this step.
   
   * Create a dummy header and an implementation file. Otherwise the build will fail since the project has no source files.
   
   * Create the project pom and declare as dependencies the frameworks and/or libraries you want to aggregate.
   See the {{{userguide/Project Structure.html}Project Structure}} and {{{userguide/Project Pom.html}Project Pom}} for detailed information concerning these steps.
   
   * Call <<<mvn initialize>>> to get the dependent projects locally.
   
   * Link all binaries you want to aggregate - add the binaries into "Link Binary with Libraries" Build Phases. Make sure the binaries are linked as "Required" (which is the default option).
   
   * Expose all headers from the dependent libraries or frameworks also as "Public" - drag and drop all public headers from the dependent frameworks and libraries into "Copy Headers" Build Phases.
   
   * Expose all bundle resources if there are some - drag and drop the bundle resources from the dependent frameworks and libraries into "Copy Bundle Resources" Build Phases.
   
   * Call <<<mvn install>>> to finally build the aggregated framework.